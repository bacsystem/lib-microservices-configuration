import org.owasp.dependencycheck.reporting.ReportGenerator

plugins {
    id 'java'
    id 'jacoco'
    id 'java-library'
    id 'maven-publish'
    id 'org.owasp.dependencycheck' version '8.4.0'
    id 'io.spring.dependency-management' version '1.1.7'
}

group = 'com.bacsystem.lib'
version = '2.0.1'

ext {
    set('springCloudVersion', "2024.0.1")
    set('springVersion', "3.4.4")
    set('junitJupiter', '5.10.0')
    set('solution', 'configuration')
    set('log4j2Version', '2.24.3')
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }

}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
    configureEach {

        resolutionStrategy {
            eachDependency {
                if (it.requested.group == 'org.apache.logging.log4j') {
                    it.useVersion("${log4j2Version}")
                }
            }
        }
        exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'
    }
}


repositories {
    mavenCentral()
    mavenLocal()
}

dependencyCheck {
    failBuildOnCVSS = project.dependencyCheck.failBuildOnCVSS
    failOnError = true
    autoUpdate = true
    //data.directory = "cacheDB"
    cveValidForHours = 1
    formats = [ReportGenerator.Format.HTML, ReportGenerator.Format.JUNIT, ReportGenerator.Format.XML] as List<String>
    suppressionFile = layout.getProjectDirectory().file("config/dependencies-check/dependency-check-suppressions.xml").asFile
    outputDirectory = layout.buildDirectory.dir("reports/dependency-check").get().asFile
    analyzers {
        experimentalEnabled = true
        archiveEnabled = true
        jarEnabled = true
        centralEnabled = true
        nexusEnabled = true
        opensslEnabled = true
    }
}

dependencyManagement {
    imports {
        mavenBom "org.junit:junit-bom:${junitJupiter}"
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
        mavenBom "org.springframework.boot:spring-boot-dependencies:${springVersion}"
    }
}


dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-webflux'
    implementation 'org.springframework.boot:spring-boot-starter-data-redis-reactive'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-log4j2'

    compileOnly 'org.projectlombok:lombok:1.18.36'

    annotationProcessor 'org.projectlombok:lombok:1.18.36'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
    testRuntimeOnly 'org.junit.platform:junit-platform-suite-api'
    testRuntimeOnly 'org.junit.platform:junit-platform-runner'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'

}


publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            groupId = group
            artifactId = project.name
            version = project.version
            description = "lib-microservices-configuration"
            versionMapping {
                usage("java-api") {
                    fromResolutionResult()
                }
                usage('java-runtime') {
                    fromResolutionResult()
                }
            }
        }

    }
    repositories {
        maven {
            name = "GitHubPackages"
            url = uri("https://maven.pkg.github.com/${project.findProperty("gpr.repo")}")
            credentials {
                username = project.findProperty("gpr.user")
                password = project.findProperty("gpr.key") ?: System.getenv("TOKEN")
            }
        }
    }
}

jacoco {
    toolVersion = '0.8.11'
}

jacocoTestReport {
    reports {
        xml.required = true
        html.required = true
    }
    dependsOn test
}
test {
    useJUnitPlatform()
    finalizedBy jacocoTestReport
    maxHeapSize = '1G'
    check.dependsOn jacocoTestCoverageVerification
}
